// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/TiPSYDiPSY/home-task/internal/model/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetBalance provides a mock function for the type MockUserService
func (_mock *MockUserService) GetBalance(ctx context.Context, userID uint64) (api.BalanceResponse, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 api.BalanceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (api.BalanceResponse, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) api.BalanceResponse); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(api.BalanceResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type MockUserService_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserService_Expecter) GetBalance(ctx interface{}, userID interface{}) *MockUserService_GetBalance_Call {
	return &MockUserService_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, userID)}
}

func (_c *MockUserService_GetBalance_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserService_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_GetBalance_Call) Return(balanceResponse api.BalanceResponse, err error) *MockUserService_GetBalance_Call {
	_c.Call.Return(balanceResponse, err)
	return _c
}

func (_c *MockUserService_GetBalance_Call) RunAndReturn(run func(ctx context.Context, userID uint64) (api.BalanceResponse, error)) *MockUserService_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateBalance(ctx context.Context, req api.TransactionRequest, UserID uint64, SourceType string) error {
	ret := _mock.Called(ctx, req, UserID, SourceType)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.TransactionRequest, uint64, string) error); ok {
		r0 = returnFunc(ctx, req, UserID, SourceType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type MockUserService_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - req api.TransactionRequest
//   - UserID uint64
//   - SourceType string
func (_e *MockUserService_Expecter) UpdateBalance(ctx interface{}, req interface{}, UserID interface{}, SourceType interface{}) *MockUserService_UpdateBalance_Call {
	return &MockUserService_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", ctx, req, UserID, SourceType)}
}

func (_c *MockUserService_UpdateBalance_Call) Run(run func(ctx context.Context, req api.TransactionRequest, UserID uint64, SourceType string)) *MockUserService_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.TransactionRequest
		if args[1] != nil {
			arg1 = args[1].(api.TransactionRequest)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserService_UpdateBalance_Call) Return(err error) *MockUserService_UpdateBalance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_UpdateBalance_Call) RunAndReturn(run func(ctx context.Context, req api.TransactionRequest, UserID uint64, SourceType string) error) *MockUserService_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}
