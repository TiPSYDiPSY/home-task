// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package db

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// GetUserData provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserData(ctx context.Context, userID uint64) (User, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) (User, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) User); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type MockUserRepository_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint64
func (_e *MockUserRepository_Expecter) GetUserData(ctx interface{}, userID interface{}) *MockUserRepository_GetUserData_Call {
	return &MockUserRepository_GetUserData_Call{Call: _e.mock.On("GetUserData", ctx, userID)}
}

func (_c *MockUserRepository_GetUserData_Call) Run(run func(ctx context.Context, userID uint64)) *MockUserRepository_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserData_Call) Return(user User, err error) *MockUserRepository_GetUserData_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserData_Call) RunAndReturn(run func(ctx context.Context, userID uint64) (User, error)) *MockUserRepository_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserBalance provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UpdateUserBalance(ctx context.Context, transaction Transaction) error {
	ret := _mock.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserBalance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Transaction) error); ok {
		r0 = returnFunc(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_UpdateUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserBalance'
type MockUserRepository_UpdateUserBalance_Call struct {
	*mock.Call
}

// UpdateUserBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction Transaction
func (_e *MockUserRepository_Expecter) UpdateUserBalance(ctx interface{}, transaction interface{}) *MockUserRepository_UpdateUserBalance_Call {
	return &MockUserRepository_UpdateUserBalance_Call{Call: _e.mock.On("UpdateUserBalance", ctx, transaction)}
}

func (_c *MockUserRepository_UpdateUserBalance_Call) Run(run func(ctx context.Context, transaction Transaction)) *MockUserRepository_UpdateUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Transaction
		if args[1] != nil {
			arg1 = args[1].(Transaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserBalance_Call) Return(err error) *MockUserRepository_UpdateUserBalance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_UpdateUserBalance_Call) RunAndReturn(run func(ctx context.Context, transaction Transaction) error) *MockUserRepository_UpdateUserBalance_Call {
	_c.Call.Return(run)
	return _c
}
